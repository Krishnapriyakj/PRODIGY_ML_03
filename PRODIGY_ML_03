pip install opencv-python

pip install opencv-python-headless


import os
import cv2
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn import svm,metrics
import matplotlib.pyplot as plt



def load_images_from_dictionary(directory):
    images=[]
    labels=[]
    label_map={'cats':0,'dogs':1}
    for subdir in ['cats','dogs']:
        subdir_path=os.path.join(directory,subdir)
        if not os.path.exists(subdir_path):
            print(f"Directory does not exist:{subdir_path}")
            continue
        for filename in os.listdir(subdir_path):
            if filename.endswith(".jpg") or filename.endswith(".png"):
                img_path=os.path.join(subdir_path,filename)
                img=cv2.imread(img_path)
                img=cv2.resize(img,(128,128))
                #img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
                images.append(img)
                labels.append(label_map[subdir])
    return np.array(images),np.array(labels)



def plot_sample_images(X, y_true, classes, num_images=10):
    fig, axes = plt.subplots(1, num_images, figsize=(20, 20))
    for i, ax in enumerate(axes):
        ax.imshow(cv2.cvtColor(X[i], cv2.COLOR_BGR2RGB))  # Convert to RGB for display
        ax.set_title(f'True: {classes[y_true[i]]}')
        ax.axis('off')
    plt.tight_layout()
    plt.show()



train_path="D:\\KJRCSS\\semester 03\\dv\\dogs-vs-cat-small\\train"
test_path="D:\\KJRCSS\\semester 03\\dv\\dogs-vs-cat-small\\test"
validate_path="D:\\KJRCSS\\semester 03\\dv\\dogs-vs-cat-small\\validation"

#LOAD TRAIN, TEST, VALIDATE PATH


train_images,train_labels=load_images_from_dictionary(train_path)
test_images,test_labels=load_images_from_dictionary(test_path)
validate_images,validate_labels=load_images_from_dictionary(validate_path)




#NORMALIZE PIXEL VALUES


train_images=train_images.astype('float32')/255.0
test_images=test_images.astype('float32')/255.0
validate_images=validate_images.astype('float32')/255.0

#FLATTEN THE IMAGES

train_images=train_images.reshape(train_images.shape[0],-1)
test_images=test_images.reshape(test_images.shape[0],-1)
validate_images=validate_images.reshape(validate_images.shape[0],-1)


#STANDARD THE FEATURES

scaler=StandardScaler()
train_images=scaler.fit_transform(train_images)
test_images=scaler.transform(test_images)
validate_images=scaler.transform(validate_images)

#TRAIN THE SVM CLASSIFIER

clf=svm.SVC(kernel="linear")
clf.fit(train_images,train_labels)

#PREDICT ON THE VALIDATE SET

validate_pred=clf.predict(validate_images)

#EVALUATE THE MODEL ON THE VALIDATION SET

validate_accuracy=metrics.accuracy_score(validate_labels,validate_pred)
print(f'Validation Accuracy: {validate_accuracy:.2f}')

#PREDICT ON THE TEST SET

test_pred=clf.predict(test_images)

#EVALUATE THE MODEL ON THE TEST SET

test_accuracy=metrics.accuracy_score(test_labels,test_pred)
print(f'Test Accuracy: {test_accuracy:.2f}')

#CLASSIFICATION REPORT

print(metrics.classification_report(test_labels,test_pred,target_names=['Cat','Dog']))


#CONFUSION MATRIX

conf_matrix=metrics.confusion_matrix(test_labels,test_pred)
print('Confusion Matrix:')
print(conf_matrix)

#VISUALIZE THE PREDICTION


def plot_sample_images(X,y_true,y_pred,classes):
    fig,axes=plt.subplots(2,5,figsize=(20,10))
    for i,ax in enumerate(axes.flat):
        ax.imshow(cv2.cvtColor(X[i].reshape(128, 128, 3), cv2.COLOR_BGR2RGB))
        ax.set_title(f'True: {classes[y_true[i]]}\nPred: {classes[y_pred[i]]}')
        ax.axis('off')
    plt.tight_layout()
    plt.show()


#PLOT SOME SAMPLE IMAGES WITH PREDICTIONS

plot_sample_images(test_images.reshape(-1,128,128,3),test_labels,test_pred,['Cat','Dog'])


def predict_single_image(img_path, model, scaler):
    img = cv2.imread(img_path)
    img = cv2.resize(img, (128, 128))
    img = img.astype('float32') / 255.0
    img = img.reshape(1, -1)
    img = scaler.transform(img)
    prediction = model.predict(img)
    return prediction



user_image_path = "D:\\KJRCSS\\semester 03\\dv\\cat.86.jpg"  # Replace with the path to the user's image
prediction = predict_single_image(user_image_path, clf, scaler)
print(f'Prediction for the user-provided image: {"Dog" if prediction == 1 else "Cat"}')


# Function to visualize the user's image with prediction

def plot_user_image(img_path, prediction, classes):
    img = cv2.imread(img_path)
    img = cv2.resize(img, (128, 128))
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.title(f'Prediction: {classes[prediction[0]]}')
    plt.axis('off')
    plt.show()



# Visualize the user's image with prediction

plot_user_image(user_image_path, prediction, ['Cat', 'Dog'])



